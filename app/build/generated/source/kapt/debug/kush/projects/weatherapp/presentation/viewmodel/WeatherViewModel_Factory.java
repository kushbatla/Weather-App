// Generated by Dagger (https://dagger.dev).
package kush.projects.weatherapp.presentation.viewmodel;

import android.app.Application;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kush.projects.weatherapp.domain.location.LocationTracker;
import kush.projects.weatherapp.domain.repository.WeatherRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherViewModel_Factory implements Factory<WeatherViewModel> {
  private final Provider<WeatherRepository> repositoryProvider;

  private final Provider<LocationTracker> locationTrackerProvider;

  private final Provider<Application> appProvider;

  public WeatherViewModel_Factory(Provider<WeatherRepository> repositoryProvider,
      Provider<LocationTracker> locationTrackerProvider, Provider<Application> appProvider) {
    this.repositoryProvider = repositoryProvider;
    this.locationTrackerProvider = locationTrackerProvider;
    this.appProvider = appProvider;
  }

  @Override
  public WeatherViewModel get() {
    return newInstance(repositoryProvider.get(), locationTrackerProvider.get(), appProvider.get());
  }

  public static WeatherViewModel_Factory create(Provider<WeatherRepository> repositoryProvider,
      Provider<LocationTracker> locationTrackerProvider, Provider<Application> appProvider) {
    return new WeatherViewModel_Factory(repositoryProvider, locationTrackerProvider, appProvider);
  }

  public static WeatherViewModel newInstance(WeatherRepository repository,
      LocationTracker locationTracker, Application app) {
    return new WeatherViewModel(repository, locationTracker, app);
  }
}
